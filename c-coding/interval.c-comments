/* 
* Author: Santosh Sajjan
* Inetrval.c - main 
*/

#include <stdio.h>
#include <string.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))
#define MAX_INTERVALS 100

/* An interval Struct to store start and end of an interval */
typedef struct Interval{
    int start, end;
}IntervalType;

/* declaring Intervel structure with 100 size  and this is the limit as 
   number of intervels pair in list 
*/
IntervalType Intervals[MAX_INTERVALS];
int number_of_intervals = 0;

/**********************Add*************************************************
* Add - takes two argument start and end of Interval.
*
* Add the interval [start,end] to existing interval list.
* Print message if the inetrval adder or Error message.
*
* RETURNS: nothing
*/
void Add(int start, int end){
		IntervalType temp_Intervals[MAX_INTERVALS];
		int j=0, i=0;
		IntervalType temp = (IntervalType){start, end};
		for (i=0 ;(i<number_of_intervals && j < MAX_INTERVALS);i++){
			/* Below if exceutes if the new adding Interval range is before the ith interval  
			and that's why adding to the tamp list to copy, if below below if start executing 
			it means insertion of new interval is taken care and all the next intervals will be just copied over.*/
			if(Intervals[i].start > end){  
				temp_Intervals[j++] = temp;
				temp = Intervals[i];
				
			}
			/* This exceute if the new adding Interval range is still far in the existing intervals.*/
			else if(Intervals[i].end < start){   
				temp_Intervals[j++] = Intervals[i];
			}
			/* This execute is the new intervel overlaps with ith intervel and two divide the  */
			else{  
				temp.start = MIN(Intervals[i].start, temp.start);
				temp.end = MAX(Intervals[i].end,temp.end);
			}
		}
		if(j != MAX_INTERVALS){
			temp_Intervals[j++] = temp;
			number_of_intervals = j;
			/* copying to global array of struct so that it can be accessed by other functions. */
			memcpy(Intervals, temp_Intervals, sizeof(temp_Intervals)); 
			printf("Successfully added inetrval [%d,%d]]\n",start,end);
		}else{
			printf("Error: Size exceeding sorry! We support upto 100 Intervals only for now. j =%d \n",j);
		}
			
		
}

/*************************Remove*******************************************
* Remove - takes two argument start and end of Interval.
*
* remove the interval [start,end] from existing interval list.
* Print message if the inetrval removed or Error message.
*
* RETURNS: nothing
*/
void Remove(int start, int end){
	IntervalType temp_Intervals[MAX_INTERVALS];
	int j=0, i=0,start_removing=0, removed=0;
	
	/* Check if the interval is out of range of existing intervels. */
	if(Intervals[0].start >= end  || Intervals[number_of_intervals-1].end <= start)
			return;

	for(i=0;(i<number_of_intervals && j<MAX_INTERVALS);i++){
		/* This executes if the ith inetrval is not effected by removing interval */
		if(Intervals[i].end <= start || Intervals[i].start >= end || removed){ 
			temp_Intervals[j++]=Intervals[i];
			/* Below if case indicate removing interval Start is on ending border of ith interval,
 			   so is belongs to outside the rage of all intervals and no need of new interval,
			   that is why setting flag start_removing to check the end part of removing interval  */
			if (Intervals[i].end == start) 
				start_removing =1;
			continue;
		}
		
		/* In below if case start is between inetrval so new inetrval is created, 
		   that's why setting flag start_removing to check the end part of removing interval  */
		if(Intervals[i].start < start){ 
			temp_Intervals[j++] = (IntervalType){Intervals[i].start, start};
			start_removing = 1;
		}
		/* Below case executes only if the end of removing interval is between any of existing interval 
		or else it won't get executed at all and programm will exit the for loop  and 
		copying all the nodes taken care in first if loop check""Intervals[i].start >= end"" */
		if((Intervals[i].end > end) && start_removing){ 
			temp_Intervals[j++] = (IntervalType){end, Intervals[i].end};
			removed=1;
		}
		
	}
	if(j!=MAX_INTERVALS+1){
		number_of_intervals = j;
		memcpy(Intervals, temp_Intervals, sizeof(temp_Intervals)); 
		printf("Successfully removed inetrval [%d,%d]]\n",start,end);
	}else{
		printf("Error: Size exceeding sorry! We support upto 100 Intervals only for now. j=%d \n",j);	
	}
}

/**************************************************************************
* printIntrevals - takes no argument.
*
* Print all intervals in the aaray of structure (Intervals) or print empty if list is empty.
*
* RETURNS: nothing
*/
void printIntrevals(){
	int i;
	
	if(number_of_intervals){
		printf("\n******************************************************************\
			\nNumber of intervals=%d\nInterval List:[",number_of_intervals);
	}else{
		printf("List is empty\n");
	}
			
	for ( i = 0; i <number_of_intervals;i++){
		printf("[%d,%d]",Intervals[i].start, Intervals[i].end);		
		if(i == number_of_intervals-1)
			printf("]\n******************************************************************\n");
		else
			printf(",");
	}
	return;
}

/**************************************************************************
* main - takes no argument.
*
* This has the test logic to take input from user and call Add/Remove/printIntrevals functions accordingly.
*
* RETURNS: nothing
*/
int main(void){
	int start=1, end=2,x=0;
	
/*	remove below commented code to add 100 Intervals and check */
/*	int i;
	for (i=0;i<MAX_INTERVALS+1;i++){
		Add(start,end); 
		start+=2;
		end+=2;
	}
*/
	while(x != 99){
		printf ("\nEnter one of below choices\n1-->Add intervel\n2-->Remove intervel\n3-->Print Intervel list\n99 -->Exit\nchoice:");
		scanf ("%d",&x);

		if (x == 1){
			printf("Enter a pair of numbers to Add to Inetervel list:\n");
			scanf("%d %d",&start,&end); 
			if(start < end){
				Add(start, end);
				printIntrevals();
			}else{
				printf("Error: Wrong input start cannot be greater than end.\n");
			}
		} else if (x == 2){
			printf("Enter a pair of numbers to Remove from Inetervel list:\n");
			scanf("%d %d",&start,&end); 
			if(start < end){
				Remove(start,end);
				printIntrevals();
			}else{
				printf("Error: Wrong input start cannot be greater than end.\n");
			}
		}else if (x ==3){
			printIntrevals();
		}
		getchar();
    }
	return 0;
}

